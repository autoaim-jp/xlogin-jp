version: '3'

services:
  redis_container:
    container_name: xlapp-container-redis
    build:
      context: ../../
      dockerfile: ./service/redis/docker/Dockerfile
    volumes:
      - ../../secret/data-redis:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]

  postgresql_container:
    container_name: xlapp-container-postgresql
    build:
      context: ../../
      dockerfile: ./service/postgresql/docker/Dockerfile
    volumes:
      - ../../secret/data-postgresql:/var/lib/postgresql/data
      - ../../service/postgresql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "xl_admin", "-d", "xl_db"]
      interval: 5s
      timeout: 5s
      retries: 30

  static_web_container:
    container_name: xlapp-container-static-web
    build:
      context: ../../
      dockerfile: ./service/staticWeb/docker/Dockerfile
    ports:
      - 127.0.0.1:59091:9090
    tty: true
    volumes:
      - ../../service/staticWeb/src:/app
      - xlapp-volume-swc-nm:/app/node_modules
    environment:
     - IS_TEST=false
    command: sh -c "rm /tmp/setup.done || true && yarn run start-watch"
    healthcheck:
      test: ls /tmp/setup.done
      interval: 5s
      timeout : 5s
      retries: 10

  auth_api_container:
    container_name: xlapp-container-auth-api
    build:
      context: ../../
      dockerfile: ./service/authApi/docker/Dockerfile
    tty: true
    volumes:
      - ../../service/authApi/src:/app
      - xlapp-volume-aac-nm:/app/node_modules
    environment:
     - IS_TEST=false
    command: sh -c "rm /tmp/setup.done || true && yarn run start-watch"
    depends_on:
      redis_container: 
        condition: service_healthy
      postgresql_container:
        condition: service_healthy
    healthcheck:
      test: ls /tmp/setup.done
      interval: 5s
      timeout : 5s
      retries: 10

  storage_api_container:
    container_name: xlapp-container-storage-api
    build:
      context: ../../
      dockerfile: ./service/storageApi/docker/Dockerfile
    tty: true
    volumes:
      - ../../service/storageApi/src:/app
      - xlapp-volume-sac-nm:/app/node_modules
    environment:
     - IS_TEST=false
    command: sh -c "rm /tmp/setup.done || true && yarn run start-watch"
    depends_on:
      auth_api_container: 
        condition: service_healthy
    healthcheck:
      test: ls /tmp/setup.done
      interval: 5s
      timeout : 5s
      retries: 10

  reverse_proxy_container:
    container_name: xlapp-container-reverse-proxy
    build:
      context: ../../
      dockerfile: ./service/reverseProxy/docker/Dockerfile
    ports:
      - 3333:80
    volumes:
      - ../../setting/.htpasswd:/etc/nginx/.htpasswd
      - ../../service/reverseProxy/nginx.conf:/etc/nginx/nginx.conf
      - ../../service/reverseProxy/log:/var/log/nginx
    depends_on:
      static_web_container:
        condition: service_healthy
      storage_api_container:
        condition: service_healthy

  prometheus:
    container_name: xlapp-container-prometheus
    image: prom/prometheus
    volumes:
      - ../../service/prometheus/prometheus:/etc/prometheus
    command: "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 127.0.0.1:56002:9090

  node-exporter:
    container_name: xlapp-container-node-exporter
    image: quay.io/prometheus/node-exporter
    ports:
      - 127.0.0.1:59100:9100

  grafana:
    container_name: xlapp-container-grafana
    image: grafana/grafana
    volumes:
      - ../../service/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ../../service/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ../../service/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../service/grafana/setting/grafana.ini:/etc/grafana/grafana.ini
      - ../../secret/data-grafana:/var/lib/grafana
    ports:
      - 127.0.0.1:56001:3000
    user: "$PID:$GID"

  alertmanager:
    container_name: xlapp-container-alertmanager
    image: prom/alertmanager
    volumes:
      - ../../service/prometheus/alertmanager:/etc/alertmanager
    command: "--config.file=/etc/alertmanager/config.yml"
    ports:
      - 127.0.0.1:9093:9093
    restart: always

  rabbitmq:
    container_name: xlapp-container-rabbitmq
    image: rabbitmq:3.11-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=chatgptrabmqusr
      - RABBITMQ_DEFAULT_PASS=klzoioi209kjlkzj1hh1u
    volumes:
      - ./service/rabbitmq/data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 10s
      retries: 20

  api_server:
    container_name: xlapp-container-api-server
    build:
      context: ./
      dockerfile: ./service/apiServer/docker/Dockerfile
    tty: true
    working_dir: /app
    volumes:
      - ./service/apiServer/src:/app
      - xlapp-volume-as-nm:/app/node_modules
    command: sh -c "yarn run start"
    depends_on:
      rabbitmq:
        condition: service_healthy

  chatgpt:
    container_name: xlapp-container-chatgpt
    build:
      context: ./
      dockerfile: ./service/chatgpt/docker/Dockerfile
    tty: true
    working_dir: /app
    volumes:
      - ./service/chatgpt/src:/app
      - xlapp-volume-cg-nm:/app/node_modules
    command: sh -c "yarn run start"
    depends_on:
      rabbitmq:
        condition: service_healthy
 
volumes:
  xlapp-volume-aac-nm:
  xlapp-volume-sac-nm:
  xlapp-volume-swc-nm:
  xlapp-volume-as-nm:
  xlapp-volume-cg-nm:



